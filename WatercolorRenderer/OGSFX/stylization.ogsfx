uniform mat4 wvp : WorldViewProjection;
uniform vec4 u_PaperColor;
uniform texture2d u_ControlImage;
uniform texture2d u_BlurredImage;
uniform texture2d u_BleededImage;
uniform texture2d u_PaperNormal;
uniform texture2d u_NoiseImage;


//Global substrate params
uniform texture2d u_DepthImage;
uniform float substrateHeightScale = 5.0;
uniform float dryness = 1.0;
uniform float paperDistortion = 1.0;
uniform float lightAngle = 3.1;
uniform float roughness = 1.0;
uniform float opacity = 1.0;

uniform texture2d u_Texture2;
uniform vec2 rvd : RelativeViewportDimensions;
uniform vec2 u_Dimensions : ViewportPixelSize;
uniform bool showControl = false;


attribute vs_quad_input
{
    vec3 in_position : POSITION;
    vec2 vs_uv : TEXCOORD0;

};
uniform texture2d u_ColorImage;

uniform sampler2D colorTex = sampler_state
{
    Texture = <u_ColorImage>;
};



uniform sampler2D noiseTex = sampler_state
{
    Texture = <u_NoiseImage>;
};

uniform sampler2D paperNorm = sampler_state
{
    Texture = <u_PaperNormal>;
};

uniform sampler2D blurTex = sampler_state
{
    Texture = <u_BlurredImage>;
};

uniform sampler2D bleedTex = sampler_state
{
    Texture = <u_BleededImage>;
};

uniform sampler2D controlTex = sampler_state
{
    Texture = <u_ControlImage>;
};

uniform sampler2D depthTex = sampler_state
{
    Texture = <u_DepthImage>;
};

attribute vs_to_ps
{
    vec2 fs_uv;
};
 

attribute ps_output 
{
    vec4 out_color;
}
 

GLSLShader VS
{

    void main() 
    {        
        fs_uv = vs_uv;
        gl_Position = wvp * vec4(in_position,1.0);
    }
}
 

GLSLShader PS
{

    vec4 pow4(vec4 v, float exp) {
        return vec4(pow(v.x,exp), pow(v.y,exp), pow(v.z,exp), pow(v.w,exp));
    }


    vec3 hash3 (vec3 p) {
        return fract(sin(vec3(dot(p, vec3(127.1, 311.7, 841.3)), 
        dot(p, vec3(269.5, 183.3, 417.2)), 
        dot(p, vec3(564.7, 299.1, 603.6)))) * 43758.5453);
    }

    vec3 cubic3(vec3 t) {
        return t * t * (3.0 - 2.0 * t);
    }

    float surflet3(vec3 p, vec3 gridPoint) {
        vec3 t = vec3(1.0) - cubic3(abs(p - gridPoint));
        vec3 gradient = hash3(gridPoint) * 2.0 - vec3(1);
        vec3 diff = p - gridPoint;
        float height = dot(diff, gradient);
        return height * t.x * t.y * t.z;
    }

    float perlin3(vec3 p) {
        vec3 f = floor(p);
        float res = 0.0;
        for(int i = 0; i <= 1; i++) {
            for(int j = 0; j <= 1; j++) {
                for(int k = 0; k <= 1; k++) {
                    res += surflet3(p, f+vec3(i,j,k));
                }
            }
        }
        return res;
    }

    vec2 sinOctaves(vec2 uv) {
        return sin(uv) + 0.5 * sin(2 * uv) + 0.25 * sin(4 * uv) + 0.125 * sin(8 * uv);
    }


    vec4 outline(vec2 uv) {
        vec3 depthSource = texture2D(depthTex, uv).xyz;
        vec2 axis = vec2(1.0,1.0);
        axis /= vec2(float(u_Dimensions.x), float(u_Dimensions.y));
        vec4 res = vec4(0.0);

        uv += 0.001 * sinOctaves(200.0 * uv);
        mat3 hKernel = mat3(vec3(3, 10, 3), vec3(0, 0, 0), vec3(-3, -10, -3));
        mat3 vKernel = mat3(vec3(3, 0, -3), vec3(10, 0, -10), vec3(3, 0, -3));

         hKernel = mat3(vec3(1, 2, 1), vec3(0, 0, 0), vec3(-1, -2, -1));
         vKernel = mat3(vec3(1, 0, -1), vec3(2, 0, -2), vec3(1, 0, -1));


       //  hKernel *= 10.0;
       // vKernel *= 10.0;

        vec3 hGradient = vec3(0.0);
        vec3 vGradient = vec3(0.0);

        for(int i = -1 ; i <= 1; i++) {
            for(int j = -1; j <= 1; j++) {
                vec2 destInd = uv + vec2(float(i), float(j)) * axis;
                vec3 depthDest = texture2D(depthTex, destInd ).xyz;

               hGradient += hKernel[i + 1][j + 1] * depthDest;
               vGradient += vKernel[i + 1][j + 1] * depthDest;

/*
                if(abs(depthDest - depthSource) > 0.03) {
                    res.x += 1.0 / 6;
                }*/
            }
        }

        vec3 color = sqrt(hGradient * hGradient + vGradient * vGradient);
        color = clamp(color, 0,1);
        float p = perlin3(vec3(color.xy * vec2(0.7, 0.7),1.0));
        //\\p = smoothstep(0.000, 0.001, p);
       // color *= 2.0 - p * p;
        // color = smoothstep(0.0,0.01,color);
        //color = 10.0 * pow4(vec4(color, 1.0), 4.0).xyz;
        return vec4(color, 1.0);

    }

    float luminance(vec3 col) {
        return 0.2126*col.r + 0.7152*col.g + 0.0722*col.b;
    }


    void main()
    {
        vec4 norm = normalize(texture2D(paperNorm, fs_uv) * 2.0 - 1.0);
        vec2 off_uv = fs_uv + norm.xy * paperDistortion * 0.001;

        off_uv.y = 1.0 - off_uv.y;

        off_uv = clamp(off_uv,0.0,1.0);
        vec4 bleed = texture2D(bleedTex, off_uv);
        vec4 blur = texture2D(blurTex, off_uv);
        vec4 ctrl = texture2D(controlTex, off_uv);
        vec4 col = texture2D(colorTex, off_uv);
        vec4 depth = texture2D(depthTex, off_uv + vec2(0.2,0.0));
        vec4 dog = blur - col;
        dog.w = 1.0;
        float dogI = max(max(dog.x,dog.y), dog.z);
        vec4 bleedInterp = ctrl.z * (bleed - col) + col;
        out_color = pow4(bleedInterp, dogI + 1 + ctrl.g);
        out_color = mix(u_PaperColor, out_color, opacity);
    }
}
 
technique Main
{
    pass p0
    {
        VertexShader (in vs_quad_input, out vs_to_ps) = VS;
        PixelShader (in vs_to_ps, out ps_output) = PS;
    }
}