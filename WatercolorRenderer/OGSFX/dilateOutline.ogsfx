uniform mat4 wvp : WorldViewProjection;
uniform vec4 u_PaperColor;
uniform texture2d u_ControlImage;
uniform texture2d u_StylizedImage;
uniform texture2d u_OutlineImage;
uniform texture2d u_PaperNormal;
uniform texture2d u_NoiseImage;

uniform vec3 camDir : ViewDirection ;

//Global substrate params
uniform texture2d u_DepthImage;
uniform int thickness = 1;
uniform float strokeFrequency = 9.0;
uniform float strokeAngle = 90.0;

uniform vec3 outlineColor;
uniform float outlineIntensity = 1.0;

uniform bool enabled;
uniform bool outlineEnabled;
uniform float angleRand = 1.0;
uniform float offsetRand = 1.0;

uniform texture2d u_Texture2;
uniform vec2 rvd : RelativeViewportDimensions;
uniform vec2 u_Dimensions : ViewportPixelSize;
uniform bool showControl = false;


uniform texture2D u_HatchImage;

uniform sampler2D hatchTex = sampler_state
{
    Texture = <u_HatchImage>;
};

uniform sampler2D outlineTex = sampler_state
{
    Texture = <u_OutlineImage>;
};

attribute vs_quad_input
{
    vec3 in_position : POSITION;
    vec2 vs_uv : TEXCOORD0;

};
uniform texture2d u_ColorImage;

uniform sampler2D colorTex = sampler_state
{
    Texture = <u_ColorImage>;
};



uniform sampler2D noiseTex = sampler_state
{
    Texture = <u_NoiseImage>;
};

uniform sampler2D paperNorm = sampler_state
{
    Texture = <u_PaperNormal>;
};

uniform sampler2D stylizedTex = sampler_state
{
    Texture = <u_StylizedImage>;
};

uniform sampler2D controlTex = sampler_state
{
    Texture = <u_ControlImage>;
};

uniform sampler2D depthTex = sampler_state
{
    Texture = <u_DepthImage>;
};


 
attribute vs_to_ps
{
    vec2 fs_uv;
};
 
attribute ps_output 
{
    vec4 out_color;
}
 
GLSLShader VS
{
    void main() 
    {        
        fs_uv = vs_uv;
        gl_Position = wvp * vec4(in_position,1.0);
    }
}
 
GLSLShader PS
{
    float hash1(float p) {
        return fract(sin(p)* 43758.5453123);
    }
    vec3 hash3 (vec3 p) {
        return fract(sin(vec3(dot(p, vec3(127.1, 311.7, 841.3)), 
        dot(p, vec3(269.5, 183.3, 417.2)), 
        dot(p, vec3(564.7, 299.1, 603.6)))) * 43758.5453);
    }

    vec3 cubic3(vec3 t) {
        return t * t * (3.0 - 2.0 * t);
    }

    float surflet3(vec3 p, vec3 gridPoint) {
        vec3 t = vec3(1.0) - cubic3(abs(p - gridPoint));
        vec3 gradient = hash3(gridPoint) * 2.0 - vec3(1);
        vec3 diff = p - gridPoint;
        float height = dot(diff, gradient);
        return height * t.x * t.y * t.z;
    }

    float perlin3(vec3 p) {
        vec3 f = floor(p);
        float res = 0.0;
        for(int i = 0; i <= 1; i++) {
            for(int j = 0; j <= 1; j++) {
                for(int k = 0; k <= 1; k++) {
                    res += surflet3(p, f+vec3(i,j,k));
                }
            }
        }
        return res;
    }

    //ideas: black outline, colored outline, use depth sobel, use color sobel, use both, tremor amount

    float luminance(vec3 col) {
        return 0.2126*col.r + 0.7152*col.g + 0.0722*col.b;
    }

    float dilate(vec2 uv) {
        vec3 strokeSource = texture2D(outlineTex, uv).xyz;
        vec2 axis = vec2(1.0,1.0);
        axis /= vec2(float(u_Dimensions.x), float(u_Dimensions.y));
        vec4 res = vec4(0.0);

        mat3 hKernel = mat3(vec3(3, 10, 3), vec3(0, 0, 0), vec3(-3, -10, -3));
        mat3 vKernel = mat3(vec3(3, 0, -3), vec3(10, 0, -10), vec3(3, 0, -3));

         hKernel = mat3(vec3(1, 2, 1), vec3(0, 0, 0), vec3(-1, -2, -1));
         vKernel = mat3(vec3(1, 0, -1), vec3(2, 0, -2), vec3(1, 0, -1));


       //  hKernel *= 10.0;
       // vKernel *= 10.0;

        vec3 hGradient = vec3(0.0);
        vec3 vGradient = vec3(0.0);

        vec3 hDepthGradient = vec3(0.0);
        vec3 vDepthGradient = vec3(0.0);

        //if positive, use dilation, otherwise, use erosion
        float minLum = luminance(strokeSource);

        int abThick = abs(thickness);

        for(int i = -abThick ; i <= abThick; i++) {
            for(int j = -abThick; j <= abThick; j++) {
                vec2 destInd = uv + vec2(float(i), float(j)) * axis;
                vec3 strokeDest = texture2D(outlineTex, destInd ).xyz;
                vec3 depthDest = texture2D(depthTex, destInd ).xyz;
                if(thickness < 0) {
                    minLum = max(luminance(strokeDest), minLum);
                } else {
                    minLum = min(luminance(strokeDest), minLum);

                }
            }
        }

        vec3 color = sqrt(hGradient * hGradient + vGradient * vGradient);
        color = clamp(color, 0,1);

        vec3 depthSobel = sqrt(hDepthGradient * hDepthGradient + vDepthGradient * vDepthGradient);
        depthSobel = clamp(depthSobel, 0,1);
        float p = perlin3(vec3(color.xy * vec2(0.7, 0.7),1.0));
        return minLum;

    }

    void main()
    {
        vec2 off_uv = vec2(fs_uv.x, 1.0-fs_uv.y);
        vec4 style = texture2D(stylizedTex, fs_uv);
        vec4 ctrl = texture2D(controlTex, off_uv);
        vec4 edge = texture2D(outlineTex, off_uv);

        vec4 randpixel = 305.3275 * (texture2D(stylizedTex, vec2(0.5, 0.5)) 
        + texture2D(stylizedTex, vec2(0.5, 0.3))
        +texture2D(stylizedTex, vec2(0.3, 0.5)));
        float d = dilate(off_uv);
        vec3 outlineCol = mix(outlineColor, vec3(1.0), d);

        out_color.xyz = outlineCol.xyz * style.xyz;
    }
}
 
technique Main
{
    pass p0
    {
        VertexShader (in vs_quad_input, out vs_to_ps) = VS;
        PixelShader (in vs_to_ps, out ps_output) = PS;
    }
}